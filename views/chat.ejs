<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        #videos {
            display: grid;
            grid-template-columns: 1fr;
            height: 100vh;
            overflow: hidden;
        }

        .video-player {
            background-color: black;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .smallFrame {
            position: fixed;
            bottom: 100px;
            right: 20px;
            height: 170px;
            width: 300px;
            border-radius: 6px;
            z-index: 10;
        }

        #controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 1em;
        }

        .control-container {
            background-color: #ffffff;
            
            height: 80px;
            width: 80px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }

        .control-container svg {
            height: 100%;
            width: 100%;
        }

        #leave-btn {
            background-color: rgb(255, 80, 80, 1);
        }

        @media screen and (max-width: 600px) {
            .smallFrame {
                height: 80px;
                width: 120px;
            }

            .control-container img {
                height: 20px;
                width: 20px;
            }
        }
    </style>
    <link href="/css/style.css" rel="stylesheet">
</head>

<body class="flex flex-col h-dvh bg-gray-200">
    <%- include('partials/header') %>
        <div class="fixed videoblock hidden  z-[222] w-full h-svh">
            <div id="videos">
                <video class="video-player" id="localVideo" autoplay muted playsinline></video>
                <video class="video-player" id="remoteVideo" autoplay playsinline></video>
            </div>
            <div id="controls">
                <!-- <div class="control-container" id="cameraButton">
                    <svg width="21" height="14" viewBox="0 0 21 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path
                            d="M20.525 2.149C20.365 2.05 20.183 2 20 2C19.847 2 19.694 2.035 19.553 2.105L17 3.382V3C17 1.346 15.654 0 14 0H3C1.346 0 0 1.346 0 3V11C0 12.654 1.346 14 3 14H14C15.654 14 17 12.654 17 11V10.618L19.553 11.894C19.694 11.965 19.847 12 20 12C20.183 12 20.365 11.95 20.525 11.851C20.82 11.668 21 11.347 21 11V3C21 2.653 20.82 2.332 20.525 2.149ZM5 8.5C4.171 8.5 3.5 7.829 3.5 7C3.5 6.171 4.171 5.5 5 5.5C5.829 5.5 6.5 6.171 6.5 7C6.5 7.829 5.829 8.5 5 8.5Z"
                            fill="white" />
                    </svg>
                </div> -->

                <div class="control-container" id="hangup">
                    <svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 122.88 122.88"><defs><style>.cls-1{fill:#ff3b30;fill-rule:evenodd;}</style></defs><title>end-call</title><path class="cls-1" d="M104.89,104.89a61.47,61.47,0,1,1,18-43.45,61.21,61.21,0,0,1-18,43.45ZM74.59,55.72a49.79,49.79,0,0,0-12.38-2.07A41.52,41.52,0,0,0,48,55.8a1.16,1.16,0,0,0-.74.67,4.53,4.53,0,0,0-.27,1.7,16.14,16.14,0,0,0,.2,2c.42,3,.93,6.8-2.42,8l-.22.07-12,3.24-.12,0A4.85,4.85,0,0,1,28,70a11.44,11.44,0,0,1-2.68-4.92,11,11,0,0,1,.42-6.93A23.69,23.69,0,0,1,29,52.39,21.52,21.52,0,0,1,36.55,46a42.74,42.74,0,0,1,10.33-3.6l.29-.07C49,42,51,41.48,53.08,41.17a62.76,62.76,0,0,1,25.14,1.59c6.87,2,13,5.43,16.8,10.7a13.88,13.88,0,0,1,2.92,9.59,12.64,12.64,0,0,1-4.88,8.43,1.34,1.34,0,0,1-1.26.28L78.6,68.38A3.69,3.69,0,0,1,75.41,66a7.73,7.73,0,0,1-.22-4,15.21,15.21,0,0,1,.22-1.6c.3-1.89.63-4.06-.89-4.72Z"/></svg>
                </div>

                <!-- <div class="control-container" id="micButton">
                    <svg width="20" height="20" viewBox="0 0 14 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd"
                            d="M7 12.5C8.7 12.5 10 11.2 10 9.5V3.5C10 1.8 8.7 0.5 7 0.5C5.3 0.5 4 1.8 4 3.5V9.5C4 11.2 5.3 12.5 7 12.5ZM12.3 9.5C12.3 12.5 9.8 14.6 7 14.6C4.2 14.6 1.7 12.5 1.7 9.5H0C0 12.9 2.7 15.7 6 16.2V19.5H8V16.2C11.3 15.7 14 12.9 14 9.5H12.3Z"
                            fill="white" />
                    </svg>
                </div> -->
            </div>
        </div>
        <div id="incoming-call"
            class="fixed hidden z-[222] w-full h-dvh bg-gray-900 bg-opacity-75 flex items-center justify-center">
            <div class="bg-white p-8 rounded-md text-center">
                <p class="mb-4">Incoming Call...</p>
                <button id="accept-call" class="bg-green-500 text-white py-2 px-4 rounded-md">Accept</button>
                <button id="reject-call" class="bg-red-500 text-white py-2 px-4 rounded-md ml-2">Reject</button>
            </div>
        </div>
        <main class="flex-1 p-4 overflow-y-auto relative" id="message-container">
            <div
                class="text-black-400 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-2/3 text-center nobody">
                No One is here , pls wait until we connect you with a partner, You will connected Sortly....</div>
        </main>
        <form id="chatform" class="bg-white p-4 flex">
            <input type="hidden" id="userid" value="">
            <input type="text" id="messagebox"
                class="flex-1 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                placeholder="Type a message">
            <button type="submit"
                class="ml-2 bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700">Send</button>
        </form>
        <video id="local-video" class="hidden" autoplay></video>
        <video id="remote-video" class="hidden" autoplay></video>

        <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"
            integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
            crossorigin="anonymous"></script>
  
        <script>
            const socket = io();
            const chatform = document.querySelector("#chatform");
            const messagebox = document.querySelector("#messagebox");
            const messagecontainer = document.querySelector("#message-container");

            let room;

            socket.emit("joinroom", { room: "<%= fullname %>" });

            socket.on("joined", function (data) {
    room = data;
    document.querySelector(".nobody").classList.add("hidden");
    document.querySelector(".information").textContent = "Connected to  " + room;
    document.querySelector(".videocall").classList.remove("hidden");
});
socket.on("userDisconnected", function (data) {
    if (data.userId !== socket.id) {
        alert("The other user has disconnected. We will connect you to a new user.");
        setTimeout(function() {
            location.reload(); // Refresh the page
        }, 2000); // 2 seconds delay
    }
});


window.addEventListener('beforeunload', function () {
    socket.emit('disconnecting'); // Notify server before unloading the page
});



            socket.on("message", function (message) {
                receiveMessage(message);
            })

            chatform.addEventListener("submit", function (event) {
                event.preventDefault();
                socket.emit("message", { room: room, message: messagebox.value });
                attachMessage(messagebox.value);
                messagebox.value = "";
            })

            function attachMessage(message) {
                const userMessageContainer = document.createElement('div');
                userMessageContainer.classList.add('flex', 'my-2', 'justify-end');

                const userMessageDiv = document.createElement('div');
                userMessageDiv.classList.add('bg-blue-500', 'text-white', 'p-3', 'rounded-lg', 'max-w-xs');

                const userMessageText = document.createElement('p');
                userMessageText.textContent = message;

                userMessageDiv.appendChild(userMessageText);

                userMessageContainer.appendChild(userMessageDiv);

                document.getElementById('message-container').appendChild(userMessageContainer);

                document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
            }

            function receiveMessage(message) {
                const messageContainer = document.createElement('div');
                messageContainer.classList.add('flex', 'my-2', 'justify-start');

                const messageDiv = document.createElement('div');
                messageDiv.classList.add('bg-gray-300', 'text-gray-800', 'p-3', 'rounded-lg', 'max-w-xs');

                const messageText = document.createElement('p');
                messageText.textContent = message;

                messageDiv.appendChild(messageText);

                messageContainer.appendChild(messageDiv);

                document.getElementById('message-container').appendChild(messageContainer);
                document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
            }

            // WEBRTC START
            let localStream;
            let remoteStream;
            let peerConnection;
            let inCall = false;

            const rtcSettings = {
                iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
            };

            const initialize = async () => {
                socket.on("signalingMessage", handleSignalingMessage);

                try {
                    localStream = await navigator.mediaDevices.getUserMedia({
                        audio: true,
                        video: true
                    })
                    document.querySelector("#localVideo").srcObject = localStream;
                    document.querySelector("#localVideo").style.display = "block";

                    initiateOffer();

                    inCall = true;
                }
                catch (err) {
                    console.log("Rejected by browser" + err);
                }
            }

            const initiateOffer = async () => {
                await createPeerConnection();
                try {
                    const offer = await peerConnection.createOffer();
                    await peerConnection.setLocalDescription(offer);
                    socket.emit("signalingMessage", {
                        room,
                        message: JSON.stringify({
                            type: "offer",
                            offer
                        })
                    })
                }
                catch (err) {
                    console.log("error in creating offer" + err);
                }
            }

            const createPeerConnection = () => {
                peerConnection = new RTCPeerConnection(rtcSettings);

                remoteStream = new MediaStream();

                document.querySelector("#remoteVideo").srcObject = remoteStream;
                document.querySelector("#remoteVideo").style.display = "block";
                document.querySelector("#localVideo").classList.add("smallFrame");

                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                })

                peerConnection.ontrack = (event) => {
                    event.streams[0].getTracks().forEach(track => {
                        remoteStream.addTrack(track);
                    })
                }

                peerConnection.onicecandidate = (event) => {
                    if (event.candidate) {
                        console.log("Sending Ice Candidates");

                        socket.emit("signalingMessage", {
                            room,
                            message: JSON.stringify({
                                type: "candidate",
                                candidate: event.candidate
                            })
                        })
                    }
                }

                peerConnection.onconnectionstatechange = () => {
                    console.log("connection state change hui ", peerConnection.connectionState);
                }
            }

            const handleSignalingMessage = async (message) => {
                const { type, offer, answer, candidate } = JSON.parse(message);
                if (type === "offer") handleOffer(offer);
                if (type === "answer") handleAnswer(answer);
                if (type === "candidate" && peerConnection) {
                    try { await peerConnection.addIceCandidate(candidate); }
                    catch (error) {
                        console.log(error);
                    }
                }
                if (type === "hangup") {
                    hangup();
                }
            }

            const handleOffer = async (offer) => {
                await createPeerConnection();
                try {
                    await peerConnection.setRemoteDescription(offer);
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);
                    socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "answer", answer }) });
                    inCall = true;
                }
                catch (error) {
                    console.log("failed to handle offer");
                }
            }

            const handleAnswer = async (answer) => {
                try {
                    await peerConnection.setRemoteDescription(answer);
                }
                catch (error) {
                    console.log("failed to handle answer");
                }
            }


            document.querySelector("#video-call-btn")
                .addEventListener("click", function () {
                    socket.emit("startVideoCall", { room })
                })

            socket.on("incomingCall", function () {
                console.log("hey");
                document.querySelector("#incoming-call").classList.remove("hidden");
            })

            socket.on("callAccepted", function () {
                initialize();
                document.querySelector(".videoblock").classList.remove("hidden");
            })

            document.querySelector("#accept-call")
                .addEventListener("click", function () {
                    document.querySelector("#incoming-call").classList.add("hidden");
                    initialize();
                    document.querySelector(".videoblock").classList.remove("hidden");
                    socket.emit("acceptCall", { room })
                })

            document.querySelector("#reject-call")
                .addEventListener("click", function () {
                    document.querySelector("#incoming-call").classList.add("hidden");
                    socket.emit("rejectCall", { room })
                })

            socket.on("callRejected", function () {
                alert("Call rejected by other user");
            })

            document.querySelector("#hangup")
                .addEventListener("click", function () {
                    hangup();
                })

            function hangup() {
                if (peerConnection) {
                    peerConnection.close();
                    peerConnection = null;
                    localStream.getTracks().forEach(track => track.stop());

                    document.querySelector(".videoblock").classList.add("hidden");
                    socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "hangup" }) });
                    inCall = false;
                }
            }
        </script>
</body>

</html>